习题13.4 (p13.4):

 编写一段程序调用13-1中的daemonize函数.调用该函数后,它已成为守护进程,再调用getlogin
 查看该进程手否有登陆名.并将结果打印至一个文件中.

头文件
 1.apue.h

 /* Our own header, to be included before all standard system headers */

#ifndef	_APUE_H
#define	_APUE_H

#if defined(SOLARIS)
#define _XOPEN_SOURCE	500	/* Single UNIX Specification, Version 2  for Solaris 9 */
#define CMSG_LEN(x)	_CMSG_DATA_ALIGN(sizeof(struct cmsghdr)+(x))
#elif !defined(BSD)
#define _XOPEN_SOURCE	600	/* Single UNIX Specification, Version 3 */
#endif

#include <sys/types.h>		/* some systems still require this */
#include <sys/stat.h>
#include <sys/termios.h>	/* for winsize */
#ifndef TIOCGWINSZ
#include <sys/ioctl.h>
#endif
#include <stdio.h>		/* for convenience */
#include <stdlib.h>		/* for convenience */
#include <stddef.h>		/* for offsetof */
#include <string.h>		/* for convenience */
#include <unistd.h>		/* for convenience */
#include <signal.h>		/* for SIG_ERR */

#define	MAXLINE	4096			/* max line length */

/*
 * Default file access permissions for new files.
 */
#define	FILE_MODE	(S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)

/*
 * Default permissions for new directories.
 */
#define	DIR_MODE	(FILE_MODE | S_IXUSR | S_IXGRP | S_IXOTH)

typedef	void	Sigfunc(int);	/* for signal handlers */

#if	defined(SIG_IGN) && !defined(SIG_ERR)
#define	SIG_ERR	((Sigfunc *)-1)
#endif

#define	min(a,b)	((a) < (b) ? (a) : (b))
#define	max(a,b)	((a) > (b) ? (a) : (b))

/*
 * Prototypes for our own functions.
 */
char	*path_alloc(int *);				/* {Prog pathalloc} */
long	 open_max(void);				/* {Prog openmax} */
void	 clr_fl(int, int);				/* {Prog setfl} */
void	 set_fl(int, int);				/* {Prog setfl} */
void	 pr_exit(int);					/* {Prog prexit} */
void	 pr_mask(const char *);			/* {Prog prmask} */
Sigfunc	*signal_intr(int, Sigfunc *);	/* {Prog signal_intr_function} */

int		 tty_cbreak(int);				/* {Prog raw} */
int		 tty_raw(int);					/* {Prog raw} */
int		 tty_reset(int);				/* {Prog raw} */
void	 tty_atexit(void);				/* {Prog raw} */
#ifdef	ECHO	/* only if <termios.h> has been included */
struct termios	*tty_termios(void);		/* {Prog raw} */
#endif

void	 sleep_us(unsigned int);			/* {Ex sleepus} */
ssize_t	 readn(int, void *, size_t);		/* {Prog readn_writen} */
ssize_t	 writen(int, const void *, size_t);	/* {Prog readn_writen} */
void	 daemonize(const char *);			/* {Prog daemoninit} */

int		 s_pipe(int *);					/* {Progs streams_spipe sock_spipe} */
int		 recv_fd(int, ssize_t (*func)(int,
		         const void *, size_t));/* {Progs recvfd_streams recvfd_sockets} */
int		 send_fd(int, int);				/* {Progs sendfd_streams sendfd_sockets} */
int		 send_err(int, int,
		          const char *);		/* {Prog senderr} */
int		 serv_listen(const char *);		/* {Progs servlisten_streams servlisten_sockets} */
int		 serv_accept(int, uid_t *);		/* {Progs servaccept_streams servaccept_sockets} */
int		 cli_conn(const char *);		/* {Progs cliconn_streams cliconn_sockets} */
int		 buf_args(char *, int (*func)(int,
		          char **));			/* {Prog bufargs} */
int              daemon_init(void);                     /* {Prog daemoninit} */  
int		 ptym_open(char *, int);	/* {Progs3 ptyopen_streams ptyopen_bsd ptyopen_linux} */
int		 ptys_open(char *);			/* {Progs3 ptyopen_streams ptyopen_bsd ptyopen_linux} */
#ifdef	TIOCGWINSZ
pid_t	 pty_fork(int *, char *, int, const struct termios *,
		          const struct winsize *);		/* {Prog ptyfork} */
#endif

int		lock_reg(int, int, int, off_t, int, off_t); /* {Prog lockreg} */
#define	read_lock(fd, offset, whence, len) \
			lock_reg((fd), F_SETLK, F_RDLCK, (offset), (whence), (len))
#define	readw_lock(fd, offset, whence, len) \
			lock_reg((fd), F_SETLKW, F_RDLCK, (offset), (whence), (len))
#define	write_lock(fd, offset, whence, len) \
			lock_reg((fd), F_SETLK, F_WRLCK, (offset), (whence), (len))
#define	writew_lock(fd, offset, whence, len) \
			lock_reg((fd), F_SETLKW, F_WRLCK, (offset), (whence), (len))
#define	un_lock(fd, offset, whence, len) \
			lock_reg((fd), F_SETLK, F_UNLCK, (offset), (whence), (len))

pid_t	lock_test(int, int, off_t, int, off_t);		/* {Prog locktest} */

#define	is_read_lockable(fd, offset, whence, len) \
			(lock_test((fd), F_RDLCK, (offset), (whence), (len)) == 0)
#define	is_write_lockable(fd, offset, whence, len) \
			(lock_test((fd), F_WRLCK, (offset), (whence), (len)) == 0)

void	err_dump(const char *, ...);		/* {App misc_source} */
void	err_msg(const char *, ...);
void	err_quit(const char *, ...);
void	err_exit(int, const char *, ...);
void	err_ret(const char *, ...);
void	err_sys(const char *, ...);

void	log_msg(const char *, ...);			/* {App misc_source} */
void	log_open(const char *, int, int);
void	log_quit(const char *, ...);
void	log_ret(const char *, ...);
void	log_sys(const char *, ...);

void	TELL_WAIT(void);		/* parent/child from {Sec race_conditions} */
void	TELL_PARENT(pid_t);
void	TELL_CHILD(pid_t);
void	WAIT_PARENT(void);
void	WAIT_CHILD(void);
#include "error.c"
#endif	/* _APUE_H */

2.error.c

#include <errno.h>      /* for definition of errno */  
#include <stdarg.h>     /* ISO C variable aruments */  
  
static void err_doit(int, int, const char *, va_list);  
  
/*  
* Nonfatal error related to a system call.  
* Print a message and return.  
*/  
void  
err_ret(const char *fmt, ...)  
{  
    va_list     ap;  
  
    va_start(ap, fmt);  
    err_doit(1, errno, fmt, ap);  
    va_end(ap);  
}  
  
/*  
* Fatal error related to a system call.  
* Print a message and terminate.  
*/  
void  
err_sys(const char *fmt, ...)  
{  
    va_list     ap;  
  
    va_start(ap, fmt);  
    err_doit(1, errno, fmt, ap);  
    va_end(ap);  
    exit(1);  
}  
  
/*  
* Fatal error unrelated to a system call.  
* Error code passed as explict parameter.  
* Print a message and terminate.  
*/  
void  
err_exit(int error, const char *fmt, ...)  
{  
    va_list     ap;  
  
    va_start(ap, fmt);  
    err_doit(1, error, fmt, ap);  
    va_end(ap);  
    exit(1);  
}  
  
/*  
* Fatal error related to a system call.  
* Print a message, dump core, and terminate.  
*/  
void  
err_dump(const char *fmt, ...)  
{  
    va_list     ap;  
  
    va_start(ap, fmt);  
    err_doit(1, errno, fmt, ap);  
    va_end(ap);  
    abort();        /* dump core and terminate */  
    exit(1);        /* shouldn't get here */  
}  
  
/*  
* Nonfatal error unrelated to a system call.  
* Print a message and return.  
*/  
void  
err_msg(const char *fmt, ...)  
{  
    va_list     ap;  
  
    va_start(ap, fmt);  
    err_doit(0, 0, fmt, ap);  
    va_end(ap);  
}  
  
/*  
* Fatal error unrelated to a system call.  
* Print a message and terminate.  
*/  
void  
err_quit(const char *fmt, ...)  
{  
    va_list     ap;  
  
    va_start(ap, fmt);  
    err_doit(0, 0, fmt, ap);  
    va_end(ap);  
    exit(1);  
}  
  
/*  
* Print a message and return to caller.  
* Caller specifies "errnoflag".  
*/  
static void  
err_doit(int errnoflag, int error, const char *fmt, va_list ap)  
{  
    char    buf[MAXLINE];  
   vsnprintf(buf, MAXLINE, fmt, ap);  
   if (errnoflag)  
       snprintf(buf+strlen(buf), MAXLINE-strlen(buf), ": %s",  
         strerror(error));  
   strcat(buf, " ");  
   fflush(stdout);     /* in case stdout and stderr are the same */  
   fputs(buf, stderr);  
   fflush(NULL);       /* flushes all stdio output streams */  
}  


3.deal.c 代码实现:

#include"apue.h"
#include<syslog.h>
#include<fcntl.h>
#include<sys/resource.h>
#include <unistd.h> 
#include<pthread.h>
#define MAXSIZE 1000

void daemonize(const char *cmd)  #daemonize初始化守护进程调用
{
  int i,fd0,fd1,fd2;
  pid_t pid;
  struct rlimit r1;
  struct sigaction sa;
  umask(0);
  if(getrlimit(RLIMIT_NOFILE,&r1) < 0)
    err_quit("%s:  can't get file limit ",cmd);
  if((pid = fork()) < 0)
    err_quit("%s: can't fork ",cmd);
  else if(pid != 0)
    exit(0);
  setsid();

  sa.sa_handler = SIG_IGN;
  sigemptyset(&sa.sa_mask);
  sa.sa_flags = 0;

  if(sigaction(SIGHUP,&sa,NULL) < 0)
    err_quit("%s: can't ignore SIGHUP ", cmd);
  if((pid = fork()) < 0)
    err_quit("%s: can't fork ",cmd);
  else if(pid != 0)
    exit(0);

  if(chdir("/") < 0)
    err_quit("%s: can't change directory to /",cmd);

  if(r1.rlim_max == RLIM_INFINITY)
    r1.rlim_max = 1024;
  for(i = 0 ; i < r1.rlim_max ;i++)
    close(i);

  fd0 = open("/dev/null",O_RDWR);
  fd1 = dup(0);
  fd2 = dup(0);
  printf("djskakl\n");

  openlog(cmd , LOG_CONS,LOG_DAEMON);
  if(fd0 != 0 || fd1 != 1 || fd2 != 2)
  {
    syslog(LOG_ERR,"unexpected file descriptors %d %d %d", fd0,fd1,fd2);
    exit(1);
  }
}



int main(int argc , char **argv)
{
  char *name ;
  char buff_name[MAXSIZE];
  daemonize("ls -h");
  name = getlogin();
  sprintf(buff_name,"name : %s \n", name);
  
  int fd = open("/home/desktop/login.txt",O_RDWR|O_CREAT);
  write(fd,buff_name,strlen(buff_name));
  close(fd);
  sleep(5);
  
  exit(0);

}

4.运行deal.c

gcc deal.c -c deal
./deal

5.运行结果
cat login.txt

name:(null)
